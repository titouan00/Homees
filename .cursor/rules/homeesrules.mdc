---
description: 
globs: 
alwaysApply: true
---
Structure & Composants
Toujours structurer le code en composants réutilisables quand c’est possible (surtout en React ou tout framework modulaire).

Éviter le code dupliqué. Extraire toute logique récurrente ou éléments visuels répétés en composants.

Lisibilité & Maintenabilité
Le code doit être facile à lire et maintenir :

Bien nommer les variables, fonctions et composants (noms explicites).

Ajouter des commentaires si une logique est non triviale.

Organiser les fichiers de manière claire (par domaine, fonctionnalité ou type).

Conventions
Respecter les conventions de nommage du langage/framework (camelCase, PascalCase, kebab-case selon les cas).

Suivre les guidelines du projet si elles existent (linting, formatage, structure).

Utiliser les imports propres (pas d'import relatif cassé ou trop longs).

Clarté et Communication
Si une partie du besoin n’est pas claire, l’IA doit poser des questions avant d’avancer.

Exemples : « Quelle technologie utilises-tu ici ? », « Quel style visuel souhaites-tu ? », « Ce composant doit-il être dynamique ? »

Performance & Optimisation
Penser à l’optimisation si besoin (mémoïsation, lazy loading, pagination, etc.).

Ne pas sur-optimiser trop tôt : privilégier la clarté avant la micro-performance.

Testabilité
Générer un code qui peut être facilement testé.

Ajouter des fonctions pures et isolées dès que possible pour simplifier les tests unitaires.